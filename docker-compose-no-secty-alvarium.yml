#  * Copyright 2023 Intel Corporation.
#  *
#  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
#  * in compliance with the License. You may obtain a copy of the License at
#  *
#  * http://www.apache.org/licenses/LICENSE-2.0
#  *
#  * Unless required by applicable law or agreed to in writing, software distributed under the License
#  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  * or implied. See the License for the specific language governing permissions and limitations under
#  * the License.
#  *
#  * EdgeX Foundry, Minnesota (3.0.x) release
#  *******************************************************************************/
#
#
#
# ************************ This is a generated compose file ****************************
#
# DO NOT MAKE CHANGES that are intended to be permanent to EdgeX edgex-compose repo.
#
# Permanent changes can be made to the source compose files located in the compose-builder folder
# at the top level of the edgex-compose repo.
#
# From the compose-builder folder use `make build` to regenerate all standard compose files variations
#
name: edgex
services:
  mongodb:
    container_name: dcf-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: dbAdmin
      MONGO_INITDB_ROOT_PASSWORD: password
    hostname: dcf-mongo-db
    image: mongo:4.4-focal
    networks:
      edgex-network: null
    ports:
      - "27017:27017/tcp"
    restart: always
    volumes:
      - /var/lib/mongo
  arangodb:
    container_name: dcf-arango
    environment:
      ARANGO_NO_AUTH: 1
    hostname: dcf-arango-db
    image: arangodb:3.8
    networks:
      edgex-network: null
    ports:
      - "8529:8529/tcp"
    restart: always
    volumes:
      - /var/lib/arango
  mqtt-broker:
    command: "/usr/sbin/mosquitto -c /mosquitto-no-auth.conf"
    container_name: dcf-mqtt-broker
    hostname: dcf-mqtt-broker
    image: eclipse-mosquitto:2.0
    networks:
      edgex-network: null
    ports:
      - "0.0.0.0:1883:1883/tcp"
    read_only: true
    restart: always
  policy-agent:
    command: "run --server /policies/code.rego /policies/data.json"
    container_name: dcf-policy-agent
    hostname: dcf-policy-agent
    image: openpolicyagent/opa:0.36.0
    networks:
      edgex-network: null
    ports:
      - "8181:8181/tcp"
    restart: always
    volumes:
      - ../policies:/policies
  dcf-subscriber:
    container_name: dcf-subscriber
    depends_on:
      - arangodb
      - mqtt-broker
    image: octo-dcf/scoring-apps-go/docker-subscriber-go:0.0.0-dev
    networks:
      edgex-network: null
    restart: always
  dcf-calculator:
    container_name: dcf-calculator
    depends_on:
      - arangodb
      - mqtt-broker
      - policy-agent
    image: octo-dcf/scoring-apps-go/docker-calculator-go:0.0.0-dev
    networks:
      edgex-network: null
    restart: always
  dcf-populator:
    container_name: dcf-populator
    depends_on:
      - arangodb
      - mongodb
    image: octo-dcf/scoring-apps-go/docker-populator-go:0.0.0-dev
    networks:
      edgex-network: null
    restart: always
  dcf-populator-api:
    container_name: dcf-populator-api
    depends_on:
      - arangodb
      - mongodb
    image: octo-dcf/scoring-apps-go/docker-populator-api-go:0.0.0-dev
    networks:
      edgex-network: null
    ports:
      - "8085:8085/tcp"
    restart: always
  app-rules-engine:
    container_name: edgex-app-rules-engine
    depends_on:
      consul:
        condition: service_started
      core-data:
        condition: service_started
    environment:
      EDGEX_PROFILE: rules-engine
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-app-rules-engine
    hostname: edgex-app-rules-engine
    image: edgexfoundry/app-service-configurable:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59701
        published: "59701"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  consul:
    command:
      - agent
      - -ui
      - -bootstrap
      - -server
      - -client
      - 0.0.0.0
    container_name: edgex-core-consul
    hostname: edgex-core-consul
    image: hashicorp/consul:1.15.2
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 8500
        published: "8500"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: root:root
    volumes:
      - type: volume
        source: consul-config
        target: /consul/config
        volume: {}
      - type: volume
        source: consul-data
        target: /consul/data
        volume: {}
  core-command:
    container_name: edgex-core-command
    depends_on:
      consul:
        condition: service_started
      core-metadata:
        condition: service_started
      database:
        condition: service_started
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      EXTERNALMQTT_URL: tcp://edgex-mqtt-broker:1883
      SERVICE_HOST: edgex-core-command
    hostname: edgex-core-command
    image: edgexfoundry/core-command:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59882
        published: "59882"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  core-common-config-bootstrapper:
    container_name: edgex-core-common-config-bootstrapper
    depends_on:
      consul:
        condition: service_started
    environment:
      ALL_SERVICES_DATABASE_HOST: edgex-redis
      ALL_SERVICES_MESSAGEBUS_HOST: edgex-redis
      ALL_SERVICES_REGISTRY_HOST: edgex-core-consul
      APP_SERVICES_CLIENTS_CORE_METADATA_HOST: edgex-core-metadata
      DEVICE_SERVICES_CLIENTS_CORE_METADATA_HOST: edgex-core-metadata
      EDGEX_SECURITY_SECRET_STORE: "false"
    hostname: edgex-core-common-config-bootstrapper
    image: edgexfoundry/core-common-config-bootstrapper:3.0.0
    networks:
      edgex-network: null
    read_only: true
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  core-data:
    container_name: edgex-core-data
    depends_on:
      consul:
        condition: service_started
      core-metadata:
        condition: service_started
      database:
        condition: service_started
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-core-data
    hostname: edgex-core-data
    image: edgexfoundry/core-data:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59880
        published: "59880"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  core-metadata:
    container_name: edgex-core-metadata
    depends_on:
      consul:
        condition: service_started
      database:
        condition: service_started
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-core-metadata
    hostname: edgex-core-metadata
    image: edgexfoundry/core-metadata:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59881
        published: "59881"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  database:
    container_name: edgex-redis
    hostname: edgex-redis
    image: redis:7.0.11-alpine
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 6379
        published: "6379"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: root:root
    volumes:
      - type: volume
        source: db-data
        target: /data
        volume: {}
  device-rest:
    container_name: edgex-device-rest
    depends_on:
      consul:
        condition: service_started
      core-data:
        condition: service_started
      core-metadata:
        condition: service_started
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-device-rest
    hostname: edgex-device-rest
    image: edgexfoundry/device-rest:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59986
        published: "59986"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  device-virtual:
    container_name: edgex-device-virtual
    depends_on:
      consul:
        condition: service_started
      core-data:
        condition: service_started
      core-metadata:
        condition: service_started
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-device-virtual
    hostname: edgex-device-virtual
    image: edgexfoundry/device-virtual:0.0.0-dev
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59900
        published: "59900"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  rules-engine:
    container_name: edgex-kuiper
    depends_on:
      database:
        condition: service_started
    environment:
      CONNECTION__EDGEX__REDISMSGBUS__PORT: "6379"
      CONNECTION__EDGEX__REDISMSGBUS__PROTOCOL: redis
      CONNECTION__EDGEX__REDISMSGBUS__SERVER: edgex-redis
      CONNECTION__EDGEX__REDISMSGBUS__TYPE: redis
      EDGEX__DEFAULT__PORT: "6379"
      EDGEX__DEFAULT__PROTOCOL: redis
      EDGEX__DEFAULT__SERVER: edgex-redis
      EDGEX__DEFAULT__TOPIC: edgex/rules-events
      EDGEX__DEFAULT__TYPE: redis
      KUIPER__BASIC__CONSOLELOG: "true"
      KUIPER__BASIC__RESTPORT: "59720"
    hostname: edgex-kuiper
    image: lfedge/ekuiper:1.9.2-alpine
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59720
        published: "59720"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: kuiper:kuiper
    volumes:
      - type: volume
        source: kuiper-data
        target: /kuiper/data
        volume: {}
      - type: volume
        source: kuiper-etc
        target: /kuiper/etc
        volume: {}
      - type: volume
        source: kuiper-log
        target: /kuiper/log
        volume: {}
      - type: volume
        source: kuiper-plugins
        target: /kuiper/plugins
        volume: {}
  support-notifications:
    container_name: edgex-support-notifications
    depends_on:
      consul:
        condition: service_started
      database:
        condition: service_started
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-support-notifications
    hostname: edgex-support-notifications
    image: edgexfoundry/support-notifications:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59860
        published: "59860"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  support-scheduler:
    container_name: edgex-support-scheduler
    depends_on:
      consul:
        condition: service_started
      database:
        condition: service_started
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      INTERVALACTIONS_SCRUBAGED_HOST: edgex-core-data
      INTERVALACTIONS_SCRUBPUSHED_HOST: edgex-core-data
      SERVICE_HOST: edgex-support-scheduler
    hostname: edgex-support-scheduler
    image: edgexfoundry/support-scheduler:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59861
        published: "59861"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
  ui:
    container_name: edgex-ui-go
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-ui-go
    hostname: edgex-ui-go
    image: edgexfoundry/edgex-ui:3.0.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        target: 4000
        published: "4000"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
networks:
  edgex-network:
    name: edgex_edgex-network
    driver: bridge
volumes:
  consul-config:
    name: edgex_consul-config
  consul-data:
    name: edgex_consul-data
  db-data:
    name: edgex_db-data
  kuiper-data:
    name: edgex_kuiper-data
  kuiper-etc:
    name: edgex_kuiper-etc
  kuiper-log:
    name: edgex_kuiper-log
  kuiper-plugins:
    name: edgex_kuiper-plugins
